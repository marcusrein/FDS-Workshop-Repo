// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RaffleWinner extends ethereum.Event {
  get params(): RaffleWinner__Params {
    return new RaffleWinner__Params(this);
  }
}

export class RaffleWinner__Params {
  _event: RaffleWinner;

  constructor(event: RaffleWinner) {
    this._event = event;
  }

  get winningTokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get winningAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newTokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Beanz__clRequestConfigResult {
  value0: Bytes;
  value1: BigInt;
  value2: i32;
  value3: BigInt;

  constructor(value0: Bytes, value1: BigInt, value2: i32, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getKeyHash(): Bytes {
    return this.value0;
  }

  getSubscriptionId(): BigInt {
    return this.value1;
  }

  getRequestConfirmations(): i32 {
    return this.value2;
  }

  getCallbackGasLimit(): BigInt {
    return this.value3;
  }
}

export class Beanz__claimWindowResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getStartTime(): BigInt {
    return this.value0;
  }

  getEndTime(): BigInt {
    return this.value1;
  }
}

export class Beanz extends ethereum.SmartContract {
  static bind(address: Address): Beanz {
    return new Beanz("Beanz", address);
  }

  BATCH_SIZE(): BigInt {
    let result = super.call("BATCH_SIZE", "BATCH_SIZE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_BATCH_SIZE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("BATCH_SIZE", "BATCH_SIZE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MIN_OWNERSHIP_TIME_FOR_CLAIM(): BigInt {
    let result = super.call(
      "MIN_OWNERSHIP_TIME_FOR_CLAIM",
      "MIN_OWNERSHIP_TIME_FOR_CLAIM():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MIN_OWNERSHIP_TIME_FOR_CLAIM(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MIN_OWNERSHIP_TIME_FOR_CLAIM",
      "MIN_OWNERSHIP_TIME_FOR_CLAIM():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  azuki(): Address {
    let result = super.call("azuki", "azuki():(address)", []);

    return result[0].toAddress();
  }

  try_azuki(): ethereum.CallResult<Address> {
    let result = super.tryCall("azuki", "azuki():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  azukiCanClaim(param0: BigInt): boolean {
    let result = super.call("azukiCanClaim", "azukiCanClaim(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBoolean();
  }

  try_azukiCanClaim(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "azukiCanClaim",
      "azukiCanClaim(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  clRequestConfig(): Beanz__clRequestConfigResult {
    let result = super.call(
      "clRequestConfig",
      "clRequestConfig():(bytes32,uint64,uint16,uint32)",
      []
    );

    return new Beanz__clRequestConfigResult(
      result[0].toBytes(),
      result[1].toBigInt(),
      result[2].toI32(),
      result[3].toBigInt()
    );
  }

  try_clRequestConfig(): ethereum.CallResult<Beanz__clRequestConfigResult> {
    let result = super.tryCall(
      "clRequestConfig",
      "clRequestConfig():(bytes32,uint64,uint16,uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Beanz__clRequestConfigResult(
        value[0].toBytes(),
        value[1].toBigInt(),
        value[2].toI32(),
        value[3].toBigInt()
      )
    );
  }

  claimWindow(): Beanz__claimWindowResult {
    let result = super.call(
      "claimWindow",
      "claimWindow():(uint128,uint128)",
      []
    );

    return new Beanz__claimWindowResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_claimWindow(): ethereum.CallResult<Beanz__claimWindowResult> {
    let result = super.tryCall(
      "claimWindow",
      "claimWindow():(uint128,uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Beanz__claimWindowResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxSupply(): BigInt {
    let result = super.call("maxSupply", "maxSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxSupply", "maxSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  realOwner(): Address {
    let result = super.call("realOwner", "realOwner():(address)", []);

    return result[0].toAddress();
  }

  try_realOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("realOwner", "realOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  requestRaffleWinner(): BigInt {
    let result = super.call(
      "requestRaffleWinner",
      "requestRaffleWinner():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_requestRaffleWinner(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "requestRaffleWinner",
      "requestRaffleWinner():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenHasWonRaffle(param0: BigInt): boolean {
    let result = super.call(
      "tokenHasWonRaffle",
      "tokenHasWonRaffle(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBoolean();
  }

  try_tokenHasWonRaffle(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "tokenHasWonRaffle",
      "tokenHasWonRaffle(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  winningAddresses(param0: Address): boolean {
    let result = super.call(
      "winningAddresses",
      "winningAddresses(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_winningAddresses(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "winningAddresses",
      "winningAddresses(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _azukiAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _maxSupply(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _vrfCoordinator(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _linkToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get initialName(): string {
    return this._call.inputValues[4].value.toString();
  }

  get initialSymbol(): string {
    return this._call.inputValues[5].value.toString();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AirdropCall extends ethereum.Call {
  get inputs(): AirdropCall__Inputs {
    return new AirdropCall__Inputs(this);
  }

  get outputs(): AirdropCall__Outputs {
    return new AirdropCall__Outputs(this);
  }
}

export class AirdropCall__Inputs {
  _call: AirdropCall;

  constructor(call: AirdropCall) {
    this._call = call;
  }

  get receivers(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get numAzukiTokens(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get chunkNum(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AirdropCall__Outputs {
  _call: AirdropCall;

  constructor(call: AirdropCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get azukiTokenIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class DevClaimCall extends ethereum.Call {
  get inputs(): DevClaimCall__Inputs {
    return new DevClaimCall__Inputs(this);
  }

  get outputs(): DevClaimCall__Outputs {
    return new DevClaimCall__Outputs(this);
  }
}

export class DevClaimCall__Inputs {
  _call: DevClaimCall;

  constructor(call: DevClaimCall) {
    this._call = call;
  }

  get numAzukiTokens(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DevClaimCall__Outputs {
  _call: DevClaimCall;

  constructor(call: DevClaimCall) {
    this._call = call;
  }
}

export class RawFulfillRandomWordsCall extends ethereum.Call {
  get inputs(): RawFulfillRandomWordsCall__Inputs {
    return new RawFulfillRandomWordsCall__Inputs(this);
  }

  get outputs(): RawFulfillRandomWordsCall__Outputs {
    return new RawFulfillRandomWordsCall__Outputs(this);
  }
}

export class RawFulfillRandomWordsCall__Inputs {
  _call: RawFulfillRandomWordsCall;

  constructor(call: RawFulfillRandomWordsCall) {
    this._call = call;
  }

  get requestId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get randomWords(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class RawFulfillRandomWordsCall__Outputs {
  _call: RawFulfillRandomWordsCall;

  constructor(call: RawFulfillRandomWordsCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RequestRaffleWinnerCall extends ethereum.Call {
  get inputs(): RequestRaffleWinnerCall__Inputs {
    return new RequestRaffleWinnerCall__Inputs(this);
  }

  get outputs(): RequestRaffleWinnerCall__Outputs {
    return new RequestRaffleWinnerCall__Outputs(this);
  }
}

export class RequestRaffleWinnerCall__Inputs {
  _call: RequestRaffleWinnerCall;

  constructor(call: RequestRaffleWinnerCall) {
    this._call = call;
  }
}

export class RequestRaffleWinnerCall__Outputs {
  _call: RequestRaffleWinnerCall;

  constructor(call: RequestRaffleWinnerCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetBaseURICall extends ethereum.Call {
  get inputs(): SetBaseURICall__Inputs {
    return new SetBaseURICall__Inputs(this);
  }

  get outputs(): SetBaseURICall__Outputs {
    return new SetBaseURICall__Outputs(this);
  }
}

export class SetBaseURICall__Inputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }

  get baseURI(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetBaseURICall__Outputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }
}

export class SetCanClaimCall extends ethereum.Call {
  get inputs(): SetCanClaimCall__Inputs {
    return new SetCanClaimCall__Inputs(this);
  }

  get outputs(): SetCanClaimCall__Outputs {
    return new SetCanClaimCall__Outputs(this);
  }
}

export class SetCanClaimCall__Inputs {
  _call: SetCanClaimCall;

  constructor(call: SetCanClaimCall) {
    this._call = call;
  }

  get azukiIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class SetCanClaimCall__Outputs {
  _call: SetCanClaimCall;

  constructor(call: SetCanClaimCall) {
    this._call = call;
  }
}

export class SetClRequestConfigCall extends ethereum.Call {
  get inputs(): SetClRequestConfigCall__Inputs {
    return new SetClRequestConfigCall__Inputs(this);
  }

  get outputs(): SetClRequestConfigCall__Outputs {
    return new SetClRequestConfigCall__Outputs(this);
  }
}

export class SetClRequestConfigCall__Inputs {
  _call: SetClRequestConfigCall;

  constructor(call: SetClRequestConfigCall) {
    this._call = call;
  }

  get _keyHash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _subscriptionId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _requestConfirmations(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get _callbackGasLimit(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SetClRequestConfigCall__Outputs {
  _call: SetClRequestConfigCall;

  constructor(call: SetClRequestConfigCall) {
    this._call = call;
  }
}

export class SetClaimWindowCall extends ethereum.Call {
  get inputs(): SetClaimWindowCall__Inputs {
    return new SetClaimWindowCall__Inputs(this);
  }

  get outputs(): SetClaimWindowCall__Outputs {
    return new SetClaimWindowCall__Outputs(this);
  }
}

export class SetClaimWindowCall__Inputs {
  _call: SetClaimWindowCall;

  constructor(call: SetClaimWindowCall) {
    this._call = call;
  }

  get _startTime(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _endTime(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetClaimWindowCall__Outputs {
  _call: SetClaimWindowCall;

  constructor(call: SetClaimWindowCall) {
    this._call = call;
  }
}

export class SetNameAndSymbolCall extends ethereum.Call {
  get inputs(): SetNameAndSymbolCall__Inputs {
    return new SetNameAndSymbolCall__Inputs(this);
  }

  get outputs(): SetNameAndSymbolCall__Outputs {
    return new SetNameAndSymbolCall__Outputs(this);
  }
}

export class SetNameAndSymbolCall__Inputs {
  _call: SetNameAndSymbolCall;

  constructor(call: SetNameAndSymbolCall) {
    this._call = call;
  }

  get _newName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _newSymbol(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SetNameAndSymbolCall__Outputs {
  _call: SetNameAndSymbolCall;

  constructor(call: SetNameAndSymbolCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferLowerOwnershipCall extends ethereum.Call {
  get inputs(): TransferLowerOwnershipCall__Inputs {
    return new TransferLowerOwnershipCall__Inputs(this);
  }

  get outputs(): TransferLowerOwnershipCall__Outputs {
    return new TransferLowerOwnershipCall__Outputs(this);
  }
}

export class TransferLowerOwnershipCall__Inputs {
  _call: TransferLowerOwnershipCall;

  constructor(call: TransferLowerOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferLowerOwnershipCall__Outputs {
  _call: TransferLowerOwnershipCall;

  constructor(call: TransferLowerOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class TransferRealOwnershipCall extends ethereum.Call {
  get inputs(): TransferRealOwnershipCall__Inputs {
    return new TransferRealOwnershipCall__Inputs(this);
  }

  get outputs(): TransferRealOwnershipCall__Outputs {
    return new TransferRealOwnershipCall__Outputs(this);
  }
}

export class TransferRealOwnershipCall__Inputs {
  _call: TransferRealOwnershipCall;

  constructor(call: TransferRealOwnershipCall) {
    this._call = call;
  }

  get newRealOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferRealOwnershipCall__Outputs {
  _call: TransferRealOwnershipCall;

  constructor(call: TransferRealOwnershipCall) {
    this._call = call;
  }
}
